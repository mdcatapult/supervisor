akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  stdout-loglevel = "ERROR"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

op-rabbit {
  topic-exchange-name = ${?RABBITMQ_EXCHANGE}
  channel-dispatcher = "op-rabbit.default-channel-dispatcher"
  default-channel-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 4
    }
    throughput = 1
  }
  connection {
    virtual-host = "doclib"
    virtual-host = ${?RABBITMQ_VHOST}
    hosts = ["localhost"]
    username = "doclib"
    username = ${?RABBITMQ_USERNAME}
    password = "doclib"
    password = ${?RABBITMQ_PASSWORD}
    port = 5672
    ssl = false
    connection-timeout = 3s
  }
}

mongo {
  database = "doclib"
  database = ${?MONGO_DATABASE}
  collection = "documents"
  collection = ${?MONGO_COLLECTION}
  read-collection = ${?mongo.collection}
  read-collection = ${?MONGO_COLLECTION_READ}
  write-collection = ${?mongo.collection}
  write-collection = ${?MONGO_COLLECTION_WRITE}
  archive-collection = ${?mongo.collection}_archive
  archive-collection = ${?MONGO_COLLECTION_ARCHIVE}
  connection {
    hosts = ["localhost"]
    username = "doclib"
    username = ${?MONGO_USERNAME}
    password = "doclib"
    password = ${?MONGO_PASSWORD}
    port = 27017
    port = ${?MONGO_PORT}
    database = "admin"
    database = ${?MONGO_AUTH_DB}
  }
}

upstream {
  concurrent: 1
  concurrent: ${?UPSTREAM_CONCURRENT}
  queue: "prefetch"
  queue: ${?UPSTREAM_QUEUE}
}

doclib {}

supervisor {
  flag-test: {
    required: [{
      flag: "supervisor.flag.one"
      route: "supervisor.flag.one"
      type: "queue"
    },{
      flag: "supervisor.flag.two"
      route: "supervisor.flag.two"
      type: "queue"
    },{
      flag: "supervisor.flag.three"
      route: "supervisor.flag.three"
      type: "queue"
    }]
  }
}
analytical: {
  supervisor: false
  supervisor: ${?ANALYTICAL_SUPERVISOR}
}