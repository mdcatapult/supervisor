akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  stdout-loglevel = "ERROR"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

queue {
  max-retries = 3
  max-retries = ${?QUEUE_MAX_RETRIES}
  host = "localhost"
  host = ${?RABBITMQ_HOST}
  virtual-host = "doclib"
  virtual-host = ${?RABBITMQ_VHOST}
  username = "doclib"
  username = ${?RABBITMQ_USERNAME}
  password = "doclib"
  password = ${?RABBITMQ_PASSWORD}
  port = 5672
  port = ${?RABBITMQ_PORT}
  ssl = false
  connection-timeout = 3000
}

mongo {
  doclib-database = "doclib"
  doclib-database = ${?MONGO_DOCLIB_DATABASE}
  documents-collection = "documents"
  documents-collection = ${?MONGO_DOCUMENTS_COLLECTION}
  connection {
    host = "localhost"
    host = ${?MONGO_HOST}
    username = "doclib"
    username = ${?MONGO_USERNAME}
    password = "doclib"
    password = ${?MONGO_PASSWORD}
    port = 27017
    port = ${?MONGO_PORT}
    database = "admin"
    database = ${?MONGO_AUTHSOURCE}
    srv = false
    srv = ${?MONGO_SRV}
  }
  read-limit = 100
  read-limit = ${?MONGO_READ_LIMIT}
  write-limit = 50
  write-limit = ${?MONGO_WRITE_LIMIT}
}

consumer {
  name: "supervisor"
  name: ${?CONSUMER_NAME}
  concurrency: 1
  concurrency: ${?CONSUMER_CONCURRENT}
  queue: "supervisor"
  queue: ${?DOCLIB_SUPERVISOR_QUEUE}
  queue: ${?CONSUMER_QUEUE}
  exchange: "doclib"
}

doclib {}

supervisor {
  flag-test: {
    required: [{
      flag: "supervisor.flag.one"
      route: "supervisor.flag.one"
      type: "queue"
    },{
      flag: "supervisor.flag.two"
      route: "supervisor.flag.two"
      type: "queue"
    },{
      flag: "supervisor.flag.three"
      route: "supervisor.flag.three"
      type: "queue"
    }]
  }
}
analytical: {
  name: "analytical.supervisor"
  supervisor: false
  supervisor: ${?ANALYTICAL_SUPERVISOR}
}