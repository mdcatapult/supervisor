admin {
  port = 9090
  port = ${?ADMIN_PORT}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  stdout-loglevel = "ERROR"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

op-rabbit {
  topic-exchange-name = ${?consumer.exchange}
  channel-dispatcher = "op-rabbit.default-channel-dispatcher"
  default-channel-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 4
    }
    throughput = 1
  }
  connection {
    virtual-host = "doclib"
    virtual-host = ${?RABBITMQ_VHOST}
    hosts = [${?RABBITMQ_HOST}]
    username = "doclib"
    username = ${?RABBITMQ_USERNAME}
    password = "doclib"
    password = ${?RABBITMQ_PASSWORD}
    port = 5672
    port = ${?RABBITMQ_PORT}
    ssl = false
    connection-timeout = 3s
  }
}

mongo {
  doclib-database = "doclib"
  doclib-database = ${?MONGO_DOCLIB_DATABASE}
  documents-collection = "documents"
  documents-collection = ${?MONGO_DOCUMENTS_COLLECTION}
  connection {
    host = "localhost"
    host = ${?MONGO_HOST}
    username = "doclib"
    username = ${?MONGO_USERNAME}
    password = "doclib"
    password = ${?MONGO_PASSWORD}
    port = 27017
    port = ${?MONGO_PORT}
    database = "admin"
    database = ${?MONGO_AUTHSOURCE}
    srv = false
    srv = ${?MONGO_SRV}
  }
  read-limit = 10
  read-limit = ${?MONGO_READ_LIMIT}
  write-limit = 5
  write-limit = ${?MONGO_WRITE_LIMIT}
}

consumer {
  name: "supervisor"
  name: ${?CONSUMER_NAME}
  concurrency: 1
  concurrency: ${?CONSUMER_CONCURRENT}
  queue: "supervisor"
  queue: ${?DOCLIB_SUPERVISOR_QUEUE}
  queue: ${?CONSUMER_QUEUE}
  exchange: ${?RABBITMQ_DOCLIB_EXCHANGE}
  exchange: ${?CONSUMER_EXCHANGE}
}

doclib {
  root: "/"
  root: ${?DOCLIB_ROOT}
  tolerance: 10
  tolerance: ${?DOCLIB_TOLERANCE}
  supervisor {
    queue: "supervisor"
    queue: ${?DOCLIB_SUPERVISOR_QUEUE}
  }
  archive {
    queue: "archive"
    queue: ${?DOCLIB_ARCHIVER_QUEUE}
  }
  error {
    queue: "errors"
    queue: ${?DOCLIB_ERROR_QUEUE}
  }
  local {
    target-dir: "local"
    target-dir: ${?DOCLIB_LOCAL_TARGET}
    temp-dir: "ingress"
    temp-dir: ${?DOCLIB_LOCAL_TEMP}
  }
  archive {
    target-dir: "archive"
    target-dir: ${?DOCLIB_ARCHIVE_TARGET}
  }
  remote {
    target-dir: "remote"
    target-dir: ${?DOCLIB_REMOTE_TARGET}
    temp-dir: "remote-ingress"
    temp-dir: ${?DOCLIB_REMOTE_TEMP}
  }
  derivative {
    target-dir: "derivatives"
    target-dir: ${?DOCLIB_DERIVATIVE_PATH}
  }
}

supervisor {
  archive: {
    required: [{
      flag: "unarchived"
      flag: ${?DOCLIB_UNARCHIVER_NAME}
      route: "unarchive"
      route: ${?DOCLIB_UNARCHIVER_QUEUE}
      type: "queue"
    }]
  }
  tabular: {
    totsv: {
      required: [{
        flag: "tabular.totsv"
        flag: ${?DOCLIB_SPREADSHEET_CONVERTER_NAME}
        route: "tabular.totsv"
        route: ${?DOCLIB_SPREADSHEET_CONVERTER_QUEUE}
        type: "queue"
      }]
    }
    analyse {
      required: [{
        flag: "tabular.analysis"
        flag: ${?DOCLIB_TABULAR_ANALYSIS_NAME}
        route: "tabular.analysis"
        queue: ${?DOCLIB_TABULAR_ANALYSIS_QUEUE}
        type: "queue"
      }]
    }
  }
  html: {
    required: [{
      flag: "html.screenshot"
      route: "html.screenshot"
      type: "queue"
    },{
      flag: "html.render"
      route: "html.render"
      type: "queue"
    }]
  }
  xml: {
    required: []
  }
  text: {
      required: [{
        flag: "rawtext"
        flag: ${?DOCLIB_RAWTEXT_CONVERTER_NAME}
        route: "rawtext"
        route: ${?DOCLIB_RAWTEXT_CONVERTER_QUEUE}
        type: "queue"
      }]
  }
  image_intermediate: {
      required: [{
        flag: "pdf.intermediates"
        flag: ${?DOCLIB_PDF_INTERMEDIATES_NAME}
        route: "pdf.intermediates"
        route: ${?DOCLIB_PDF_INTERMEDIATES_QUEUE}
        type: "queue"
      }]
  }
  bounding_box: {
      required: [{
        flag: "bounding_box"
        flag: ${?DOCLIB_CALCULATEBBOX_NAME}
        route: "pdf.figures"
        route: ${?DOCLIB_CALCULATEBBOX_QUEUE}
        type: "queue"
      }]
  }
  analytical: {
      required: [{
        flag: ${analytical.name}
        route: "analytical.supervisor"
        route: ${?DOCLIB_ANALYTICAL_SUPERVISOR_QUEUE}
        type: "queue"
      }]
  }
  document: {
    required: []
  }
  chemical: {
    required: []
  }
  image: {
    required: []
  }
  audio: {
    required: []
  }
  video: {
    required: []
  }
  ner: {
    required: [{
      flag: "ner.leadmine.chemblactivityterms"
      flag: ${?DOCLIB_LEADMINE_CHEMBLACTIVITYTERMS_NAME}
      route: "ner.leadmine.chemblactivityterms"
      route: ${?DOCLIB_LEADMINE_CHEMBLACTIVITYTERMS_QUEUE}
      type: "queue"
    },{
      flag: "ner.leadmine.chemicalentities"
      flag: ${?DOCLIB_LEADMINE_CHEMICALENTITIES_NAME}
      route: "ner.leadmine.chemicalentities"
      route: ${?DOCLIB_LEADMINE_CHEMICALENTITIES_QUEUE}
      type: "queue"
    },{
      flag: "ner.leadmine.chemicalidentifiers"
      flag: ${?DOCLIB_LEADMINE_CHEMICALIDENTIFIERS_NAME}
      route: "ner.leadmine.chemicalidentifiers"
      route: ${?DOCLIB_LEADMINE_CHEMICALIDENTIFIERS_QUEUE}
      type: "queue"
    },{
      flag: "ner.leadmine.poseidon"
      flag: ${?DOCLIB_LEADMINE_POSEIDON_NAME}
      route: "ner.leadmine.poseidon"
      route: ${?DOCLIB_LEADMINE_POSEIDON_QUEUE}
      type: "queue"
    },{
      flag: "ner.leadmine.geneprotein"
      flag: ${?DOCLIB_LEADMINE_GENEPROTEIN_NAME}
      route: "ner.leadmine.geneprotein"
      route: ${?DOCLIB_LEADMINE_GENEPROTEIN_QUEUE}
      type: "queue"
    }]
  }
}

analytical: {
  name: "analytical.supervisor"
  name: ${?DOCLIB_ANALYTICAL_SUPERVISOR_QUEUE}
  supervisor: false
  supervisor: ${?ANALYTICAL_SUPERVISOR_FORWARDING}
}

ner: {
    required: [{
      flag: "ner.leadmine.smeclassification"
      flag: ${?DOCLIB_LEADMINE_NER_NAME}
      route: "ner.leadmine.smeclassification"
      route: ${?DOCLIB_LEADMINE_NER_QUEUE}
      type: "queue"
    }]
}
